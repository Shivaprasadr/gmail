name: Gmail Email Cleanup

on:
  # Run daily at 2 AM UTC (adjust timezone as needed)
  schedule:
    - cron: '0 2 * * *'
  
  # Allow manual triggering with custom options
  workflow_dispatch:
    inputs:
      sender_emails:
        description: 'Sender emails to clean (comma-separated, leave empty to use configured list)'
        required: false
        default: ''
        type: string
      days_old:
        description: 'Number of days old for email deletion'
        required: false
        default: '5'
        type: string
      dry_run:
        description: 'Run in dry-run mode (no actual deletions)'
        required: false
        default: false
        type: boolean
      max_emails_per_sender:
        description: 'Maximum emails to delete per sender (safety limit)'
        required: false
        default: '100'
        type: string

jobs:
  cleanup-emails:
    name: Clean up old Gmail emails
    runs-on: ubuntu-latest
    
    # Add timeout to prevent long-running jobs
    timeout-minutes: 30
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'email-cleanup/package-lock.json'

      - name: üì¶ Install dependencies
        run: |
          cd email-cleanup
          npm ci --omit=dev || npm install --omit=dev

      - name: üîç Validate configuration
        run: |
          cd email-cleanup
          node -e "
            const fs = require('fs');
            const config = JSON.parse(fs.readFileSync('config/senders.json', 'utf8'));
            const enabledSenders = config.senders.filter(s => s.enabled);
            console.log('‚úÖ Configuration valid');
            console.log(\`üìß Found \${enabledSenders.length} enabled senders\`);
            console.log('üìã Enabled senders:', enabledSenders.map(s => s.email).join(', '));
          "

      - name: üßπ Run Gmail cleanup
        env:
          GMAIL_CLIENT_ID: ${{ secrets.GMAIL_CLIENT_ID }}
          GMAIL_CLIENT_SECRET: ${{ secrets.GMAIL_CLIENT_SECRET }}
          GMAIL_REFRESH_TOKEN: ${{ secrets.GMAIL_REFRESH_TOKEN }}
          SENDER_EMAILS_LIST: ${{ vars.SENDER_EMAILS_LIST || secrets.SENDER_EMAILS_LIST }}
          MANUAL_SENDER_EMAILS: ${{ github.event.inputs.sender_emails }}
          CLEANUP_DAYS_OLD: ${{ github.event.inputs.days_old || '5' }}
          DRY_RUN: ${{ github.event.inputs.dry_run || false }}
          MAX_EMAILS_PER_SENDER: ${{ github.event.inputs.max_emails_per_sender || '100' }}
          MAX_RESULTS_PER_QUERY: '100'
          RATE_LIMIT_DELAY_MS: '1000'
        run: |
          cd email-cleanup
          echo "üöÄ Starting Gmail email cleanup..."
          echo "üìÖ Deleting emails older than: $CLEANUP_DAYS_OLD days"
          echo "üîÑ Dry run mode: $DRY_RUN"
          echo "üìß Max emails per sender: $MAX_EMAILS_PER_SENDER"
          if [ -n "$MANUAL_SENDER_EMAILS" ]; then
            echo "üéØ Manual sender list: $MANUAL_SENDER_EMAILS"
          else
            echo "üìã Using configured sender list"
          fi
          
          node gmail-cleanup.js

      - name: üìä Cleanup completed
        if: success()
        run: echo "‚úÖ Email cleanup completed successfully! Check the logs above for details."

      - name: üö® Notify on failure
        if: failure()
        run: |
          echo "‚ùå Gmail cleanup failed!"
          echo "Please check the logs and verify:"
          echo "1. Gmail API credentials are valid"
          echo "2. Sender configuration is correct"
          echo "3. Rate limits are not exceeded"
          echo "4. Network connectivity is stable"

  # Remove the commit-logs job since we're not storing logs
  # Optional: Add notification job for failures
  notify-failure:
    name: Notify on failure
    runs-on: ubuntu-latest
    needs: cleanup-emails
    if: failure()
    
    steps:
      - name: ÔøΩ Cleanup failed notification
        run: |
          echo "‚ùå Gmail cleanup failed!"
          echo "Please check the logs above and verify:"
          echo "1. Gmail API credentials are valid"
          echo "2. Sender configuration is correct"
          echo "3. Rate limits are not exceeded"
          echo "4. Network connectivity is stable"
